<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/core.xjs';

var masking = {

	/**
	/* 문자열을 마스킹한다.
	/* @param str 문자열
	/* @param type 마스킹 유형 (EMAIL,NAME,PHONE,PERSONAL_NO,ID,IP,ADDRESS,ZIP_NO,CARD_NO,CARD_PERIOD,ACC_NO)
	/*	- EMAIL : 이메일
	/*	- NAME : 이름
	/*	- PHONE : 전화번호
	/*	- PERSONAL_NO : 주민번호
	/*	- ID : 아이디
	/*	- ADDRESS : 주소
	/*	- ZIP_NO : 우편번호
	/*	- CARD_NO : 카드번호
	/*	- CARD_PERIOD : 카드유효기간
	/*	- ACC_NO : 계좌번호
	/*
	/* @return 마스킹된 문자열
	**/
	mask: function(str, type) {
		if (type === 'EMAIL') {
			return $ustra.utils.masking.email(str);
		}
		if (type === 'NAME') {
			return $ustra.utils.masking.name(str);
		}
		if (type === 'PHONE') {
			return $ustra.utils.masking.phone(str);
		}
		if (type === 'PERSONAL_NO') {
			return $ustra.utils.masking.rrn(str);
		}
		if (type === 'ID') {
			return $ustra.utils.masking.id(str);
		}
		if (type === 'IP') {
			return $ustra.utils.masking.ip(str);
		}
		if (type === 'ADDRESS') {
			return $ustra.utils.masking.addr(str);
		}
		if (type === 'ZIP_NO') {
			return $ustra.utils.masking.zipNumber(str);
		}
		if (type === 'CARD_NO') {
			return $ustra.utils.masking.cardNo(str);
		}
		if (type === 'CARD_PERIOD') {
			return $ustra.utils.masking.cardPeriod(str);
		}
		if (type === 'ACC_NO') {
			return $ustra.utils.masking.accNo(str);
		}
		
		return str;
	},
	
	/**
	/* 이메일 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	email: function(value) {
		if (!value) {
			return value;
		}

		var originStr = value;
		var emailStr = originStr.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi);

		if (!emailStr) {
			return value;
		}
		var strLength = emailStr.toString().split('@')[0].length - 3;
		return originStr.toString().replace(new RegExp('.(?=.{0,' + strLength + '}@)', 'g'), '*');
	},
	
	/**
	/* 전화번호 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	phone: function(value) {
		if (!value) {
			return value;
		}

		var originStr = value;
		var phoneStr;
		var maskingStr;
		
		if (originStr.toString().split('-').length !== 3) {
			phoneStr = originStr.length < 11 ? originStr.match(/\d{10}/gi) : originStr.match(/\d{11}/gi);
			if (!phoneStr) {
			  return originStr;
			}

			if (originStr.length < 11) {
				maskingStr = originStr.toString().replace(phoneStr, phoneStr.toString().replace(/(\d{3})(\d{3})(\d{4})/gi, '$1***$3'));
			} else {
				maskingStr = originStr.toString().replace(phoneStr, phoneStr.toString().replace(/(\d{3})(\d{4})(\d{4})/gi, '$1****$3'));
			}
		} else {
			phoneStr = originStr.match(/\d{2,3}-\d{3,4}-\d{4}/gi);
			if (!phoneStr) {
				return originStr;
			}
			if (/-[0-9]{3}-/.test(phoneStr)) {
				maskingStr = originStr.toString().replace(phoneStr, phoneStr.toString().replace(/-[0-9]{3}-/g, '-***-'));
			} else if (/-[0-9]{4}-/.test(phoneStr)) {
				maskingStr = originStr.toString().replace(phoneStr, phoneStr.toString().replace(/-[0-9]{4}-/g, '-****-'));
			}
		}
		
		return maskingStr;
	},
	
	/**
	/* 주민번호 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	rrn: function(value) {
		var originStr = value;
		var rrnStr;
		var maskingStr;
		
		if (!originStr) {
			return originStr;
		}
		rrnStr = originStr.match(/(?:[0-9]{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[1,2][0-9]|3[0,1]))-[1-4]{1}[0-9]{6}\b/gi);
		
		if (rrnStr) {
			maskingStr = originStr.toString().replace(rrnStr, rrnStr.toString().replace(/(-?)([1-4]{1})([0-9]{6})\b/gi, '$1$2******'));
		} else {
			rrnStr = originStr.match(/\d{13}/gi);
			if (rrnStr) {
				maskingStr = originStr.toString().replace(rrnStr, rrnStr.toString().replace(/([0-9]{6})$/gi, '******'));
			} else {
				return originStr;
			}
		}
		return maskingStr;
	},
	
	/**
	/* 이름 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	name: function(value) {
		if (!value) {
			return value;
		}
		if (value.length > 2) {
			var originName = value.split('');
			originName.forEach(function (_name, i) {
				if (i === 0 || i === originName.length - 1) return;
				originName[i] = '*';
			});
		
			var joinName = originName.join();
			return joinName.replace(/,/g, '');
		} else {
			var pattern = /.$/;
			return value.replace(pattern, '*');
		}
	},
	
	/**
	/* 아이디 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	id: function(value) {
		if (!value) {
			return value;
		}

		var originStr = value;
		var maskingStr;

		if (originStr.length < 2) {
			maskingStr = originStr;
		} else if (originStr.length < 3) {
			maskingStr = originStr.replace(/\S{1}$/, '*');
		} else {
			maskingStr = originStr.replace(/\S{2}$/, '**');
		}
		return maskingStr;
	},
	
	/**
	/* 아이피 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	ip: function(value) {
		if (!value) {
			return value;
		}

		var regex = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/;
		if (!regex.test(value)) {
			return value;
		}

		var originStr = value;
		var originStrArray = originStr.split('.');
		var maskingStr;
		
		if (parseInt(originStrArray[0]) >= 128 && parseInt(originStrArray[0]) <= 191) {
			// B 클래스
			maskingStr = originStrArray[0] + '.' + '***' + '.' + originStrArray[2] + '.' + originStrArray[3];
		} else if (parseInt(originStrArray[0]) >= 192 && parseInt(originStrArray[0]) <= 223) {
			// C 클래스
			maskingStr = originStrArray[0] + '.' + originStrArray[1] + '.' + '***' + '.' + originStrArray[3];
		} else {
			// 기타
			maskingStr = originStrArray[0] + '.' + '***' + '.' + originStrArray[2] + '.' + originStrArray[3];
		}

		return maskingStr;
	},
	
	/**
	/* 주소 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	addr: function(value) {
		if (!value) {
			return value;
		}

		if (!value) return '';
		var value_arr = value.split(' ');

		if (value_arr.length > 4) {
			return value_arr[0] + ' ' + value_arr[1] + ' ' + value_arr[2] + ' ' + value_arr[3] + ' ****';
		}
		return value ? value.substring(0, value.length - 4) + '****' : '';
	},
	
	/**
	/* 우편번호 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	zipNumber: function(value) {
		if (!value) {
			return value;
		}

		return value ? value.substring(0, value.length - 3) + '***' : '';
	},
	
	/**
	/* 카드번호 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	cardNo: function(value) {
		if (!value) {
			return value;
		}

		var matched = value.match(/(\d{4})-(\d{4})-(\d{4})-(\d{4})/gi);
		if (matched && matched.length > 0) {
			for (var i = 0; i < matched.length; i++) {
				value = value.replace(matched[i], matched[i].toString().replace(/(\d{4})-(\d{4})-(\d{4})-(\d{4})/gi, "$1-****-****-$4"));
			}
		}

		matched = value.match(/(\d{4})(\d{4})(\d{4})(\d{4})/gi);
		if (matched && matched.length > 0) {
			for (var i = 0; i < matched.length; i++) {
				value = value.replace(matched[i], matched[i].toString().replace(/(\d{4})(\d{4})(\d{4})(\d{4})/gi, "$1********$4"));
			}
		}
		return value;
	},
	
	/**
	/* 카드유효기간 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	cardPeriod: function(value) {
		if (!value) {
			return value;
		}

		return '**/**';
	},
	
	/**
	/* 계좌번호 마스킹
	/* @param value 문자열
	/*
	/* @return 마스킹된 문자열
	**/
	accNo: function(value) {
		
		if (!value) {
			return value;
		}
		
		value = _.padEnd(value, 7, ' ')
		return value.substring(0, value.length - 6) + '******';
	}
};

$ustra.module('utils', {
	masking: masking
});
]]></Script>
