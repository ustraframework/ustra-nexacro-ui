<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/core.xjs';
include 'ustra::libs/web/utils/crypto.xjs';
include 'ustra::libs/web/events.xjs';
include 'ustra::libs/web/form.xjs';
include 'ustra::libs/web/component.xjs';

var AUTH_INFO_ITEM_NAME = '__ustra-auth__';


$ustra.module('auth', {
	
	defaults: {
		// 로그인 API URL
		loginApiUrl: '/api/authentication/login'
	},
	
	/**
	* 인증 정보를 저장한다.
	* @param sub 인증 키
	* @param name 디스플레이 명
	* @param roles 역할
	* @param additionalInfo 부가 정보
	**/
	storeAuthInfo: function(sub, name, roles, additionalInfo) {
		var authInfo = {
			sub: sub,
			name: name,
			additionalInfo: additionalInfo || {},
			roles: roles || []
		};
		authInfo = $ustra.utils.crypto.encryptAes256(JSON.stringify(authInfo));
		window.sessionStorage.setItem(AUTH_INFO_ITEM_NAME, authInfo);
	},
	
	/**
	* 인증 정보를 초기화 한다.
	**/
	clearAuthInfo: function() {
		window.sessionStorage.removeItem(AUTH_INFO_ITEM_NAME);
	},
	
	/**
	* 인증 정보를 조회한다.
	**/
	getAuthInfo: function() {
		var storedAuthString = window.sessionStorage.getItem(AUTH_INFO_ITEM_NAME);
		
		if (!storedAuthString) {
			return null;
		}
		
		return JSON.parse($ustra.utils.crypto.decryptAes256(storedAuthString));
	},
	
	/**
	* 인증 여부를 조회
	/* @return 인증 완료 여부 (boolean)
	**/
	authenticated: function() {
		return !!$ustra.auth.getAuthInfo();
	},
	
	/**
	/* ROLE 권한 존재 여부 확인
	/* @param roles 권한 목록 (string | array)
	/* @return 
	**/
	hasRoles: function(roles) {
		roles = Array.isArray(roles) ? roles : [roles];
		var authInfo = $ustra.auth.getAuthInfo();
		
		if (!authInfo || !authInfo.roles) {
			return false;
		}
		
		return authInfo.roles.findIndex(function(role) {
			var roleAuth = role.authority;
			return roles.some(function(r) {
				return 'ROLE_' + r === roleAuth;
			});
		}) > -1;
	},
	
	/**
	* 인터셉터 등록
	**/
	_addInterceptor: function() {
		$ustra.axios.getInstance().interceptors.request.use(function (config) {			
			if (config.form) {
				var form = $ustra.auth._findMenuForm(config.form);
				
				if (form) {
					var currentProgramMenu = form.$ustraConfig.currentMenu;
					// 헤더 정보 추가
					if (currentProgramMenu.mnuId) {
						config.headers['Menu-Id'] = currentProgramMenu.mnuId // 메뉴 아이디
					}

					if (currentProgramMenu.proIdVal) {
						config.headers['Program-Id'] = currentProgramMenu.proIdVal // 프로그램 아이디
					}
				}
			}
			return config;
		});
	},
	
	_findMenuForm: function(form) {
		var currentForm = form;
		while(currentForm) {
			if (currentForm) {
				if (currentForm.$ustraConfig && currentForm.$ustraConfig.currentMenu) {
					return currentForm;
				}
			}
			currentForm = currentForm.parent;
		}
	},
		
	/**
	* 폼 로드 전 인증 정보 검증 수행
	**/
	_checkAuthBeforeFormLoaded: function(form) {
		
		var currentMenu = $ustra.form.getMenu(form);
		var authInfo = $ustra.auth.getAuthInfo();
		
		if (form.requiredAuth === 'true' && !authInfo) {
			$ustra.auth._throwMenuAuthorizationError(form, currentMenu, '로그인이 필요합니다.');
			return false;
		}
		
		if (currentMenu) {
			form.$ustraConfig = form.$ustraConfig || {};
			form.$ustraConfig.currentMenu = currentMenu;
			
			// 권한 사용하지 않음.
			if (currentMenu.mnuTyCd === '03') {
				return;
			}
			
			if (!authInfo || !authInfo.roles) {
				$ustra.auth._throwMenuAuthorizationError(form, currentMenu, '로그인이 필요합니다.');
				return false;
			}
			
			var index = authInfo.roles.findIndex(function(role) {
				return role.menuId === currentMenu.mnuId;
			});
			
			if (index < 0) {
				$ustra.auth._throwMenuAuthorizationError(form, currentMenu);
				return false;
			}
			$ustra.events.fireEvent('accessed-menu-form', { menu: currentMenu, form:form });
			
		}
	},
	
	_throwMenuAuthorizationError: function(form, currentMenu, message) {
		$ustra.events.fireGlobalErrorEvent(
					form,
					currentMenu.mnuUrl,
					401,
					-1,
					message || '선택한 기능을 사용할 수 있는 권한이 없습니다.',
					new Error('선택한 기능을 사용할 수 있는 권한이 없습니다.')
				);
	}
	
});

if (!$ustra.auth.__executed) {
	$ustra.auth.__executed = true;
	$ustra.auth._addInterceptor();
	$ustra.events.addEventHandler('before-form-loaded', $ustra.auth._checkAuthBeforeFormLoaded, null, false, -100);
}

]]></Script>
