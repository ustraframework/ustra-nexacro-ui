<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/app.xjs';
include 'ustra::libs/web/data.xjs';
include 'ustra::libs/web/component.xjs';

$ustra.module('axios', {
	
	_loadedScripts: {},
	
	defaults: {
		api: {
			method: 'post',
			autoHandlerError: true,
			dataset: {
				skip: true
			}
		}
	},
	
	/**
	/* 동적으로 스크립트를 로드한다.
	/*
	/* @param url 스크립트 url
	/* @param callback 로드 callback
	**/
	loadScript: function(url, callback) {
	
		if ($ustra.axios._loadedScripts[url]) {
			if (callback) {
				callback();
			}
			return;
		}
	
		axios.get(url, {
			responseType: 'text'
		}).then(function(res) {
			if (res.data) {
				eval(res.data);
				$ustra.axios._loadedScripts[url] = true;
				if (callback) {
					callback();
				}
			}
		});
	},
	
	/**
	/* 넥사크로 API를 호출한다.
	/*
	/* @param url 
	/* @param option 호출 옵션 (axios 옵션)
	/*	- form : 호출 form 객체
	/*	- autoHandlerError : 에러 자동 처리 여부 (boolean)
	/*	- dataset : 데이터 셋 옵션 (object)
	/*		- skip : 데이터 셋 옵션이 없을 경우 skip 여부 (boolean)
	/*		- receive : 수신 옵션 (object) 
	/*			[key] : 서버 데이터셋 ID
	/*			[value] : 로컬 데이터셋 ID 혹은 nexacro.Dataset
	/*	- parameter : 전송 파라메터 (object) = key: 전송 파라메터 아이디
	/*		[key] : 전송 파라메터 아이디
	/*		[value] : nexacro.dataSet | any
	**/
	nexacroApi: function(url, option) {
		option = $ustra.core.merge({}, $ustra.axios.defaults.api, $ustra.app._config, option || {}, 
		{ 
			url: url, 
			responseType: 'text', 
			method: 'post',
			dataset: {
				receive: {}
			},
			headers: {
				accept: 'application/xml',
				'content-Type': 'text/xml'
			},
			baseURL: nexacro._getService('apiUrl').url || null
		});
		
		if (!option.form) {
			throw new Error('option.form is required');
		}
		
		option.data = $ustra.axios._makeXmlParameter(option);
		
		return axios.request(option).then(function(res) {
			var result = $ustra.axios._parseXmlToObject(res.data, option);
			
			result.form = option.form;
			result.code = result.variables.ErrorCode;
			result.message = result.variables.ErrorMsg;
			
			if (result.code < 0) {
				var err = new Error(result.message);
				err.code = result.code;
				err.form = option.form;
				throw err;
			}
			
			return result;
		}).catch(function(err) {
			console.error(err);
			err.form = option.form;
			
			if (typeof err.code === 'undefined') {
				err.code = -1;
			}
			
			
			if (option.autoHandlerError) {
				var requestUrl = '';
				var statusCode = $ustra.axios.getStatusCode(err);
				
				if (err.config) {
					requestUrl = err.config.url;
				}
				
				$ustra.events.fireGlobalErrorEvent(
					option.form,
					requestUrl,
					statusCode,
					-1,
					err.message,
					err
				);
				
			}
			
			throw err;
		});
	},
	
	/**
	/* axios error 객체로 부터 status code 추출
	/*
	/* @param err Error 객체
	**/
	getStatusCode: function(err) {
		if (!err) {
			return 500;
		}
		
		if (err.request) {
			statusCode = err.request.status
		}
		
		if (err.response) {
			statusCode = err.response.status
		}	
	},
	
	
	_parseXmlToObject: function(xml, option) {
		var result = { variables: {}, dataset: {} }
		var objDom = new nexacro.DomParser();
		domDoc = objDom.parseFromString(xml);
		
		// parse parameters
		var parametersDom = domDoc.querySelector('Parameters');
		if (parametersDom) {
			var parametersNodes = parametersDom.children;
			var parametersDom = parametersDom.getElementsByTagName('Parameter');
			
			for(var i=0; i<parametersDom.length; i++) {
				var parameterDom = parametersDom[i];
				var id = parameterDom.attributes['id'].value;
				var type = parameterDom.attributes['type'].value;
				var value = parameterDom.textContent;
				
				result.variables[id] = $ustra.data.parseValue(type, value);
			}
			
		}
		
		// parse dataset
		var datasetDoms = domDoc.querySelectorAll('Dataset')
		for(var i=0; i<datasetDoms.length; i++) {
			var datasetDom = datasetDoms[i];
			var id = datasetDom.attributes['id'].value;
			var dataset = $ustra.axios._getLocalDataSet(option, id);
									
			if (!dataset) {
				continue;
			}
			
			var datasetXml = datasetDom.outerHTML || new XMLSerializer().serializeToString(datasetDom);
			
			dataset.loadXML(datasetXml);
			result.dataset[id] = $ustra.data.dataSetToObject(dataset);
			
			// 가상 데이터 셋 초기화
			if (!dataset._refform) {
				dataset.clear();
			}
		}
		
		return result;
	},
	
	_getLocalDataSet: function(option, id) {
		
		var dataset = null
		var receiveOption = option.dataset.receive[id]
		
		if (receiveOption) {
			if (typeof receiveOption === 'string') {
				var foundComponent = $ustra.component.findComponent(receiveOption, option.form);
				
				if (!foundComponent) {
					return option.dataset.skip ? null : new Dataset();
				}
				
				if ($ustra.component.getType(foundComponent) === 'Dataset') {
					return foundComponent;
				}
				
				console.warn(foundComponent.id + ' is not nexacro.dataSet');
				return option.dataset.skip ? null : new Dataset();
			} else {
				
				if ($ustra.component.getType(receiveOption) === 'Dataset') {
					return receiveOption;
				}
				
				console.warn(receiveOption + ' is not nexacro.dataSet');
			}
			
		}
		
		return option.dataset.skip ? null : new Dataset();		
		
	},
	
	_makeXmlParameter: function(option) {
		var xml = '<?xml version="1.0" encoding="UTF-8"?>';
		xml+= '<Root xmlns="http://www.nexacroplatform.com/platform/dataset">'
		
		
		if (option.parameter) {
			
			xml+= '<Parameters>'
			for(var key in option.parameter) {
				if (!option.parameter[key]) {
					continue;
				}
				
				if ($ustra.component.getType(option.parameter[key]) === 'Dataset') {
					continue;
				}
				
				xml+= '<Parameter id="' + key + '">'
				xml+= '<![CDATA['
				xml+= option.parameter[key]
				xml+= ']]]]><![CDATA[>'
				xml+= '</Parameter>'
			}
			xml+= '</Parameters>'
			
			
			
			for(var key in option.parameter) {
				if (!option.parameter[key]) {
					continue;
				}
				
 				if ($ustra.component.getType(option.parameter[key]) !== 'Dataset') {
 					continue;
 				}
				
				// dataset 데이터 미존재의 경우 제외
				if (option.parameter[key].getRowCount() < 1) {
					continue;
				}
				
				
				xml += option.parameter[key].saveXML(key);
			}
			
		}
		
		
		xml+= '</Root>';
		
		return xml;
	}
});]]></Script>
