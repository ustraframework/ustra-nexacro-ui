<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/app.xjs'
include 'ustra::libs/web/component.xjs'
include 'ustra::libs/web/ui.xjs'

$ustra.module('validation', {
	
	defaults: {
		message: {
			global: '유효하지 않은 입력 값 입니다.',
			required: '필수 입력입니다.',
			min: '{1} 자 이상 입력해야 합니다.',
			max: '{1} 자까지만 입력 가능합니다.',
			email: '유효하지 않은 이메일입니다.',
			mobile: '유효하지 않은 모바일번호입니다.'
		},
		
		// 유효성 예외 메시지 form path
		messageFormPath: 'ustra::forms/common/validationMessage.xfdl',
		
		// 유효성 invalid css name
		invalidCssClassName: 'ustra_validation_invalid',
		
		// 메시지 노출 유형 ('messagebox' | 'alert')
		messageNotificationType: 'messagebox'
	},
	
	// 초기화 메소드
	initialize: function() {
		$ustra.app.getConfig(function() {
			$ustra.validation._config()
		});
	},
	
	// cache된 config
	_cachedConfig: null,
	
	// merge된 option 조회
	_config: function() {
		if ($ustra.validation._cachedConfig) {
			return $ustra.validation._cachedConfig;
		}
		$ustra.validation._cachedConfig =  $ustra.core.merge({}, $ustra.validation.defaults, $ustra.app._config.validation || {})
		return $ustra.validation._cachedConfig;
	},
	
	/**
	/* 유효성 확인을 수행할 컴포넌트를 등록한다.
	/* @param components 대상 컴포넌트 목록 또는 컨테이너 컴포넌트 목록 (nexacro.Component | [nexacro.Component]
	/* 
	/* @return $ustra.validation.Validator 객체
	**/
	registerComponents: function(components) {
		if (!components) {
			throw new Error('유효성 확인을 수행할 components를 입력하십시오.');
		}
		
		var targetComponents = $ustra.validation._filterTargetComponents($ustra.component.getChildComponents(components, true));
		var validator = new $ustra.validation.Validator();
		validator._initValidate(targetComponents);
		
		return validator;
	},
	
	/**
	/* 유효성 확인을 수행할 단일 컴포넌트를 등록한다.
	/* @param component 대상 단일 컴포넌트 (nexacro.Component | [nexacro.Component]
	/* 
	/* @return $ustra.validation.Validator 객체
	**/
// 	registerComponent: function(component) {
// 		return $ustra.validation.registerComponents(component);
// // 		if (!component) {
// // 			throw new Error('유효성 확인을 수행할 component를 입력하십시오.');
// // 		}
// // 
// // 		var validator = new $ustra.validation.Validator();
// // 		var sameCnt = 0;
// // 		
// // 		_targetComponents.forEach(function(_targetComponent) {
// // 			if (_targetComponent.id == component.id) sameCnt++;
// // 		});
// // 		
// // 		if (sameCnt == 0) validator._initValidateOne(component);
// // 		
// // 		return validator;
// 	},
	
	// 단일 컴포넌트 유효성체크 제거
	removeComponent: function(component) {
		this._targetComponents.forEach(function(_targetComponent, index) {
			if (_targetComponent.id == component.id) this._targetComponents.splice(index, 1);
		});
		validator.prototype.resetAll();
	},
	
	// 유효성 검사 객체
	Validator: function() {},
	
	// 대상 컴포넌트 목록 중 validation을 적용할 컴포넌트를 추출
	_filterTargetComponents: function(components) {
		return components.filter(function(comp) {
			var type = $ustra.component.getType(comp).toLowerCase();
			return (comp.validation || comp.required === 'true') && 'combo,edit,maskedit,textarea,radio,checkbox,spin,calendar'.indexOf(type) > -1;
		});
	},
	
	// validation message layer를 등록
	_addValidationMessageContainer: function(validator, component) {
		
		var refTop = component.id + ':0' ;
		var refLeft = component.getOffsetLeft();
			
		var validationMessageContainer = new Div();
		validationMessageContainer.init(component.id + '_validationMessage', refLeft, refTop, 200, 30, null, null, 200, 30);
		validationMessageContainer.set_url($ustra.validation._config().messageFormPath);
		validationMessageContainer.set_async(false);
		validationMessageContainer.set_formscrollbartype('none');
		
		component.parent.addChild(validationMessageContainer.name, validationMessageContainer);
		component.bringToFront();
		component.validationMessageContainer = validationMessageContainer;
		
		component.addEventHandler('onsetfocus', function(obj) { validator.validate(obj, false, true); }, component.form);
		component.addEventHandler('onkillfocus', function(obj) { validator.validate(obj, false, false); }, component.form);
		component.addEventHandler('oninput', function(obj) { validator.validate(obj, false, true); }, component.form);
	}
	
});

var validatorFn = $ustra.validation.Validator;

// validaion 초기 세팅
validatorFn.prototype._initValidate = function(components) {

	var _self = this;
	this._targetComponents = components;

	components.forEach(function(component) {
			
		if (component.initializedValidation) {
			return;
		}
		
		component.initializedValidation = true;
		
		// validation layer box를 표시할 경우 설정
		if ($ustra.validation._config().messageNotificationType === 'messagebox') {
			$ustra.validation._addValidationMessageContainer(_self, component);
		}
		
	});
	
};

/**
/* 대상 컴포넌트의 유효성 확인을 reset 한다.
/* @param component 대상 컴포넌트
**/
validatorFn.prototype.reset = function(component) {
	$ustra.app.getConfig(function(config) {
		if ($ustra.validation._config().invalidCssClassName) {
			$ustra.component.removeCssClass(component, $ustra.validation._config().invalidCssClassName);
		}
		
		if (component.validationMessageContainer) {
			component.validationMessageContainer.show();
			component.validationMessageContainer.set_visible(false);
		}
	});
}

/**
/* 모든 컴포넌트의 유효성 확인을 reset 한다.
/* @param component 대상 컴포넌트
**/
validatorFn.prototype.resetAll = function() {
	var _self = this;
	this._targetComponents.forEach(function(cl) {
		_self.reset(cl);
	});
}

/**
/* 대상 컴포넌트 전체의 유효성을 확인한다.
/* @param autoFocus 실패 시, 자동 포커스 여부 (default, true)
/* 
/* @return 유효성 확인 결과 ({validationResult: boolean, invalidComponents: nexacro.Component[]})
**/
validatorFn.prototype.validateAll = function(autoFocus) {
	return this.validate(null, $ustra.defaults(autoFocus, true));
}

/**
/* 대상 컴포넌트 전체의 유효성을 확인한다.
/* @param component 컴포넌트, 전체 대상일 경우는 null (nexacro.Component)
/* @param autoFocus 실패 시, 자동 포커스 여부 (default, false)
/* @param showMessage 메시지 표시 여부 (default, false)
/* 
/* @return 유효성 확인 결과 ({validationResult: boolean, invalidComponents: nexacro.Component[]})
**/
validatorFn.prototype.validate = function(component, autoFocus, showMessage) {
	
	var components = []
	
	if (!component) {
		components = this._targetComponents;
	} else {
		components = [ component ];
	}
	
	var validResult = {
		validationResult: true,
		invalidComponents: []
	}
	
	var _self = this;
	var notificationMessage = null;
	components.forEach(function(component) {
	
		
		var options = [];
		if (component.validation) {
			options = JSON.parse(component.validation);
		}
		
		if (!Array.isArray(options)) {
			options = [options];
		}
		
		if (component.required) {
			options.unshift({ type: 'required' });
		}
		
		if (component.validationMessageContainer) {
			component.validationMessageContainer.show();
			component.validationMessageContainer.set_visible(false);
		}
		
		
		var invalidCssClassName = $ustra.validation._config().invalidCssClassName
		
		if (invalidCssClassName) {
			$ustra.component.removeCssClass(component, invalidCssClassName);
		}
		
		for(var i=0; i<options.length; i++) {
			var option = options[i];
			var result = _self._validate(component, option);
						
			if (result === false || typeof result === 'string') {
				
				validResult.validationResult = false;
				validResult.invalidComponents.push(component);
			
				if (showMessage) {
					if (component.validationMessageContainer) {
						component.validationMessageContainer.set_visible(true);
					}
				}
				
				if (invalidCssClassName) {
					$ustra.component.addCssClass(component, invalidCssClassName);
				}
				
				var message = typeof result === 'string' ? result : option.message;
				
				if (!message) {
					message = $ustra.validation._config().message[option.type];
				}
				
				if (!message) {
					message = $ustra.validation._config().message.global;
				}
				message = $ustra.format(message, component.value, option.value);
				
				if (component.validationMessageContainer) {
					component.validationMessageContainer.form.setMessage(message);
				} 
				
				if ($ustra.validation._config().messageNotificationType === 'alert' && !notificationMessage) {
					notificationMessage = message;
				}
				
				break;
			}
		}
	});
	
	if (notificationMessage && $ustra.validation._config().messageNotificationType === 'alert') {
		$ustra.ui.alert(notificationMessage, '입력 확인', 'error', function() {
			if (autoFocus && validResult.invalidComponents.length > 0) {
				validResult.invalidComponents[0].setFocus();
			}
		});
	} else {
		if (autoFocus && validResult.invalidComponents.length > 0) {
			validResult.invalidComponents[0].setFocus();
		}
	}
	
	return validResult;
	
}

// type에 따른 유효성 확인
validatorFn.prototype._validate = function(component, option) {
	
	if (option.type === 'required') {
		return this.validateRequired(component.value);
	}
	
	if (option.type === 'email') {
		return this.validateEmail(component.value);
	}
	
	if (option.type === 'mobile') {
		return this.validateMobile(component.value, option.dash);
	}
	
	if (option.type === 'custom') {
		return this._validateCustom(component, option.fnName);
	}
	
	if (option.type === 'min') {
		return this.validateMin(component.value, option.value);
	}
	
	if (option.type === 'max') {
		return this.validateMax(component.value, option.value);
	}
	
	return true;
}

/**
/* 필수 값 확인
/* @param value 입력 값
/* 
/* @return 유효성 확인 결과 또는 예외 메시지 (boolean | string)
**/
validatorFn.prototype.validateRequired = function(value) {

	if (typeof value === 'undefined' || value === null || value.length === 0) {
		return false;
	}
	
	return true;
}

/**
/* 이메일 확인
/* @param value 입력 값
/* 
/* @return 유효성 확인 결과 또는 예외 메시지 (boolean | string)
**/
validatorFn.prototype.validateEmail = function(value) {
	
	if (!value) {
		return true;
	}
	
	return /^[A-Za-z0-9_\.\-]+@[A-Za-z0-9\-]+\.[A-Za-z0-9\-]+/.test(value);	
}

/**
/* 모바일 확인
/* @param value 입력 값
/* @param dash dash포함여부
/* 
/* @return 유효성 확인 결과 또는 예외 메시지 (boolean | string)
**/
validatorFn.prototype.validateMobile = function(value, dash) {
	
	if (!value) {
		return true;
	}
	
	if (dash) {
		return /01[016789]-[^0][0-9]{2,3}-[0-9]{3,4}/.test(value);
	} else {
		return /01[016789][^0][0-9]{2,3}[0-9]{3,4}/.test(value);
	}
}

/**
/* 최소 자리수 확인
/* @param value 입력 값
/* @param minValue 최소 입력 값
/*
/* @return 유효성 확인 결과 또는 예외 메시지 (boolean | string)
**/
validatorFn.prototype.validateMin = function(value, minValue) {
	var length = !value ? 0 : value.length;
	return length >= minValue;
}

/**
/* 최대 자리수 확인
/* @param value 입력 값
/* @param maxValue 최대 입력 값
/* 
/* @return 유효성 확인 결과 또는 예외 메시지 (boolean | string)
**/
validatorFn.prototype.validateMax = function(value, maxValue) {
	var length = !value ? 0 : value.length;
	return length <= minValue;
}



/**
/* custom 유효성 확인
/* @param component 컴포넌트
/* @param functionName 커스톰 function 명
/* 
/* @return 유효성 확인 결과 또는 예외 메시지 (boolean | string)
**/
validatorFn.prototype._validateCustom = function(component, functionName) {

	var form = $ustra.component.getForm(component, true);
	
	if (!form[functionName]) {
		throw new Error(functionName + ' 메소드가 존재하지 않습니다.');
	}
	
	return form[functionName](component, component.value);
}]]></Script>
