<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="authGrp_auth" width="1280" height="720" titletext="New Form" onload="authGrp_auth_onload">
    <Layouts>
      <Layout height="720" mobileorientation="landscape" screenid="Desktop_screen" width="1280">
        <Static id="Static01_00_00_00_00_00_00_00_00" taborder="5" left="135" height="40" cssclass="sta_WF_LabelBg" right="0" top="10" text=""/>
        <Grid id="grdLeft" taborder="0" left="0" top="110" width="100.00%" binddataset="dsMenu" autofittype="none" treeusecheckbox="false" bottom="50" treeinitstatus="collapse,all" selecttype="row" cssclass="grd_WF_Tree" oncellclick="grdLeft_oncellclick" onvscroll="grdLeft_onvscroll" ontreestatuschanged="grdLeft_ontreestatuschanged">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="30"/>
                <Column size="229"/>
                <Column size="1021"/>
              </Columns>
              <Rows>
                <Row size="28"/>
              </Rows>
              <Band id="body">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:authYn" checkboxfalsevalue="N" checkboxtruevalue="Y"/>
                <Cell col="1" text="bind:mnuNm" displaytype="treeitemcontrol" edittype="tree" treelevel="bind:mnuStepNo" treecheck="bind:chk"/>
                <Cell col="2"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Div id="divScope" taborder="1" left="0" top="55" height="50" right="0"/>
        <Button id="btnCancel" taborder="2" text="취소" left="42.95%" width="80" height="36" bottom="5" cssclass="btn_WF_BtnLarge02" onclick="btnCancel_onclick"/>
        <Button id="btnApply" taborder="3" text="저장" left="btnCancel:6" width="80" height="36" bottom="5" cssclass="btn_WF_BtnLarge03" enable="true" onclick="btnApply_onclick"/>
        <Static id="staSrtDt" taborder="4" text="권한사용기간&lt;fc v=&quot;#ff2c55&quot;&gt;*&lt;/fc&gt;" left="15" height="40" width="120" cssclass="sta_WF_Label01" top="10" usedecorate="true"/>
        <Calendar id="calSrtDt" taborder="6" left="145" top="16" height="28" dateformat="yyyy-MM-dd" width="145" validation="[{&quot;type&quot;:&quot;required&quot;}, { &quot;type&quot;: &quot;custom&quot;, &quot;fnName&quot;: &quot;validateDate&quot; }]"/>
        <Calendar id="calEndDt" taborder="7" left="315" top="16" height="28" dateformat="yyyy-MM-dd" width="145" validation="[{&quot;type&quot;:&quot;required&quot;}, { &quot;type&quot;: &quot;custom&quot;, &quot;fnName&quot;: &quot;validateDate&quot; }]"/>
        <Static id="Static00" taborder="8" text="~" left="298" top="0" width="16" height="60"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsMenu" useclientlayout="true">
        <ColumnInfo>
          <Column id="authScopCd" type="string" size="32"/>
          <Column id="delYn" type="string" size="32"/>
          <Column id="dpYn" type="string" size="32"/>
          <Column id="fileFmtCont" type="string" size="32"/>
          <Column id="fileNm" type="string" size="32"/>
          <Column id="iconFileId" type="string" size="32"/>
          <Column id="iconSrc" type="string" size="32"/>
          <Column id="ipList" type="string" size="32"/>
          <Column id="ipLmtYn" type="string" size="32"/>
          <Column id="mnuDesc" type="string" size="32"/>
          <Column id="mnuId" type="string" size="32"/>
          <Column id="mnuNm" type="string" size="32"/>
          <Column id="mnuSrtNo" type="int" size="4"/>
          <Column id="mnuStepNo" type="int" size="4"/>
          <Column id="mnuTyCd" type="string" size="32"/>
          <Column id="mnuUrl" type="string" size="32"/>
          <Column id="proIdVal" type="string" size="32"/>
          <Column id="prvViewYn" type="string" size="32"/>
          <Column id="regDttm" type="datetime" size="17"/>
          <Column id="regUsrId" type="string" size="32"/>
          <Column id="regUsrIp" type="string" size="32"/>
          <Column id="svPath" type="string" size="32"/>
          <Column id="sysCd" type="string" size="32"/>
          <Column id="updDttm" type="datetime" size="17"/>
          <Column id="updUsrId" type="string" size="32"/>
          <Column id="updUsrIp" type="string" size="32"/>
          <Column id="uprMnuId" type="string" size="32"/>
          <Column id="useYn" type="string" size="32"/>
          <Column id="authYn" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[include 'ustra::libs/web/app.xjs'
include 'ustra::libs/web/popup.xjs'
include 'ustra::libs/web/axios.xjs'
include 'ustra::libs/web/component-dataset.xjs'

// 폼 로드
this.authGrp_auth_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	var parameter = $ustra.popup.getParameter(this);
	this.drawScopeCheckBox();
	this.loadAuthority(parameter.authGrpId);
	
	this.validator = $ustra.validation.registerComponents(this);
};

// 권한 범위 체크 박스 처리
this.drawScopeCheckBox = function() {
	var scopeCodes = $ustra.app.commonCode.getCommonCodes('AUTH_SCOP_CD').filter(function(code) { return code.dtlCd !== '*' });
	
	scopeCodes.forEach(function(code, index) {
		var checkbox = new CheckBox();
		var id = 'chkScope' + index;
		var preId = 'chkScope' + (index - 1);
		checkbox.init(id, index === 0 ? 20 : preId + ':' + 20, 20, 100, 28);
		
		this.divScope.addChild(id, checkbox);
		checkbox.show();
		checkbox.set_text(code.cdNm);
		checkbox.set_fittocontents('width');
		checkbox.authScopCd = code.dtlCd;
		checkbox.addEventHandler('onclick', function(obj, e) {
			
			var rowCount = this.dsMenu.getRowCount();
			for(var i=0; i<rowCount; i++) {
				var authScopCd = this.dsMenu.getColumn(i, 'authScopCd');
				
				if (obj.authScopCd === authScopCd) {
					this.dsMenu.setColumn(i, 'authYn', obj.value ? 'Y' : 'N');
					this.updateUpperCheckReclusive(this.dsMenu.getColumn(i, 'uprMnuId'), obj.value ? 'Y' : 'N');
				}
			}
			
			this.drawFunctionButtons();
		}, this);
		
		
	}.bind(this));
}


// 권한 조회
this.loadAuthority = function(authGrpId) {
	$ustra.axios.nexacroApi('/api/system/authority/auth-grp', {
		form: this,
		dataset: {
			skip: false
		},
		parameter: {
			authGrpId: authGrpId
		}
	}).then(function(res) {
		
		try {
			this.grdLeft.set_enableredraw(false);
			this.dsMenu.clearData();
			
			this.calSrtDt.set_value(res.variables.authority.useSrtDt);
			this.calEndDt.set_value(res.variables.authority.useEndDt);
			
			var menus = res.variables.authority.menus;
			
			if (!menus) {
				return;
			}
		
			menus.forEach(function(row) {
				--row.mnuStepNo;
			});
			
			menus = $ustra.data.sortForTree(menus, 'mnuId', 'uprMnuId', 'mnuStepNo', 'mnuSrtNo');
			
			var checkReclusive = function(menu) {
				if (menu.uprMnuId && menu.authYn === 'Y') {
					var uprMenu = menus.find(function(subMenu) { return subMenu.mnuId === menu.uprMnuId });
					
					if (uprMenu) {
						uprMenu.authYn = 'Y'
						checkReclusive(uprMenu);
					}
				}
			}
			
			// 상위 auth 처리
			menus.forEach(function(menu) {
				checkReclusive(menu);
			});
			
			this.originAuthData = menus;
			this.authId = res.variables.authority.authId;
			this.authGrpId = res.variables.authority.authGrpId;
			
			$ustra.component.dataset.bindData(res.form.dsMenu, menus);
			this.drawFunctionButtons();
		} finally {
			this.grdLeft.set_enableredraw(true);
		}
			
	}.bind(this));
	
}

// functon button 생성
this.drawFunctionButtons = function() {
	
	var rows = this.grdLeft._bodyBand._matrix._rows;
	for(var i=0; i<rows.length; i++) {
		var rowIndex = rows[i]._rowidx;
		var index = this.grdLeft.getDatasetRow(rowIndex);
		var targetEl = $($ustra.component.getEl(rows[i]._cells[2]));
		
		// clear element
		targetEl.empty();
		
		var authData = this.originAuthData[index];
		if (authData.mnuTyCd === '02') {
			
			var authFns = authData.authFncs;
			
			for(var j=0; j<authFns.length; j++) {
				var authFn = authFns[j];
				var button = $('<span />')
					.data('fnc', authFn)
					.text(authFn.fncNm)
					.addClass('ustra')
					.addClass('toggle-box');
				
				if (authFn.authYn === 'Y') {
					button.addClass('checked');
				}
				
				if (this.dsMenu.getColumn(index, 'authYn') !== 'Y') {
					button.addClass('disabled');
				}
				button.click(function() {
					
					var fnc = $(this).data('fnc');
					
					if (fnc.authYn === 'Y') {
						$(this).removeClass('checked');
						fnc.authYn = 'N';
					} else {
						$(this).addClass('checked');
						fnc.authYn = 'Y';
					}
				});
				
				
				targetEl.append(button);
				
			}
			
		}
	}
	
}


// 상향 재귀 체크 업데이트
this.updateUpperCheckReclusive = function(targetUprMnuId, authYn) {
	var rowCount = this.dsMenu.getRowCount();
	for(var i=0; i<rowCount; i++) {
		var mnuId = this.dsMenu.getColumn(i, 'mnuId');
		var uprMnuId = this.dsMenu.getColumn(i, 'uprMnuId');
		
		if (mnuId === targetUprMnuId) {
			this.dsMenu.setColumn(i, 'authYn', authYn);
			this.originAuthData[i].authFncs.forEach(function(fnc) {
				fnc.authYn = authYn;
			});
			this.updateUpperCheckReclusive(uprMnuId, authYn);
		}
	}
}

// 하향 재귀 체크 업데이트
this.updateBottomCheckReclusive = function(targetMnuId, authYn) {
	var rowCount = this.dsMenu.getRowCount();
	for(var i=0; i<rowCount; i++) {
		var uprMnuId = this.dsMenu.getColumn(i, 'uprMnuId');
		var mnuId = this.dsMenu.getColumn(i, 'mnuId');
		
		if (uprMnuId === targetMnuId) {
			this.dsMenu.setColumn(i, 'authYn', authYn);
			this.originAuthData[i].authFncs.forEach(function(fnc) {
				fnc.authYn = authYn;
			});
			this.updateBottomCheckReclusive(mnuId, authYn);
			
		}
	}
}

this.validateDate = function() {
	if (this.calSrtDt.value > this.calEndDt.value) {
		return '권한 사용기간을 확인하십시오.';
	}
	return true;
}

// 그리드 셀 클릭
this.grdLeft_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{	
	if (e.col === 0) {
		this.grdLeft.set_enableredraw(false);
		this.updateBottomCheckReclusive(this.dsMenu.getColumn(e.row, 'mnuId'), this.dsMenu.getColumn(e.row, 'authYn'));
		this.grdLeft.set_enableredraw(true);
		this.drawFunctionButtons();
	}
};

this.grdLeft_onvscroll = function(obj:nexacro.Grid,e:nexacro.ScrollEventInfo)
{
	this.drawFunctionButtons();
};

this.grdLeft_ontreestatuschanged = function(obj:nexacro.Grid,e:nexacro.GridTreeStatusEventInfo)
{
	setTimeout(function() { this.drawFunctionButtons(); }.bind(this), 100);
};

// 취소 버튼 클릭
this.btnCancel_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	$ustra.popup.close(this);
};

// 저장 버튼 클릭
this.btnApply_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	
	var result = this.validator.validateAll();
	
	if (!result.validationResult) {
		return;
	}
	
	var authInfos = $ustra.component.dataset.toObject(this.dsMenu).rows;
	var saveData = {
		authId: this.authId,
		authGrpId: this.authGrpId,
		useSrtDt: this.calSrtDt.value,
		useEndDt: this.calEndDt.value,
		menus: []
	};
	
	authInfos.forEach(function(authInfo, index) {
		if (authInfo.authYn === 'Y') {
			var menuAuthInfo = {
				mnuId: authInfo.mnuId,
				authFncs: this.originAuthData[index].authFncs.map(function(fnc) {
					return {
						authId: this.authId,
						authYn: fnc.authYn,
						fncId: fnc.fncId,
						mnuId: fnc.mnuId
					};
				})
			};
			saveData.menus.push(menuAuthInfo);
		}
	}.bind(this));
	
	$ustra.axios.nexacroApi('/api/system/authority/save', {
		form: this,
		parameter: {
			authority: saveData
		}
	}).then(function() {
		$ustra.popup.close(this);
	}.bind(this));
};
]]></Script>
  </Form>
</FDL>
