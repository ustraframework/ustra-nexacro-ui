<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/core.xjs';
include 'ustra::libs/web/app.xjs';
include 'ustra::libs/web/auth.xjs';
include 'ustra::libs/web/popup.xjs';
include 'ustra::libs/web/component.xjs';
include 'ustra::libs/web/bo/favorite.xjs';

var __self = null;
var auth = {
	
	defaults: {
		// 로그인 API URL
		loginApiUrl: '/api/authentication/login',
		
		// 로그아웃 API URL
		logoutApiUrl: '/api/authentication/logout'
	},
	
	// merge된 option 조회
	_config: function() {
		if ($ustra.bo.auth._cachedConfig) {
			return $ustra.bo.auth._cachedConfig;
		}
		
		$ustra.app._config.bo = $ustra.app._config.bo || {};
		
		$ustra.bo.auth._cachedConfig =  $ustra.core.merge({}, $ustra.bo.auth.defaults, $ustra.app._config.bo.auth || {})
		return $ustra.bo.auth._cachedConfig;
	},
	
	/**
	/* 인증 처리
	/* @param name 인증자 명 or ID (string)
	/* @param password 비밀번호 (string)
	/* @param addtionalInfoFn 부가정보 저장 처리 객체 function (function)
	/*	- arg0: res.body
	/* @return 
	/*	- body : 인증 결과 본문
	/*		- authenticated : 인증 여부
	/*		- authorities : 권한 목록
	/*		- deptNm : 부서명
	/*		- hasUser : 사용자 존재 여부
	/*		- loginFailCnt : 로그인 실패 수
	/*		- pwdUnchangedDays : 패스워드 미변경일 수
	/*		- resCd : 응답 코드
	/*		- resetPassword : 패스워드 초기화 여부
	/*		- userKey : 사용자 키
	/*		- userMenus : 사용자 메뉴
	/*		- userName : 사용자 명
	/*		- actionResponse: 인증 결과(object)
	/*			action: 처리 유형
	/*				SUCCESS: 인증성공
	/*				SHOW_DIALOG: dialog 표시
	/*				SUCCESS_RECOMMEND_CHANGE_PASSWORD: 인증성공 (패스워드 변경 권장)
	/*				FAIL_REQUIRE_APPROVAL: 실패 (승인 요청 필요)
	/*				REQUIRE_CHANGE_PASSWORD: 실패 (패스워드 변경 필요)
	/*			message: 표시 메시지
	/*			approvalType: 승인 요청 유형 (FAIL_REQUIRE_APPROVAL일 경우)
	/*			approvalName: 승인 요청 명 (FAIL_REQUIRE_APPROVAL일 경우)
	**/
	authenticate: function(name, password, addtionalInfoFn) {
		
		var config = __self._config();
	
		return $ustra.axios.api(config.loginApiUrl, {
			data: {
				userId: name,
				userPw: password
			}
		}).then(function(res) {
			
			var loginResult = res.data || {};
			loginResult.body = loginResult.body || {};
			loginResult.body.actionResponse = {};
		
			if (loginResult.resultCode !== '0000') {
				loginResult.body.actionResponse = {
					action: 'SHOW_DIALOG',
					message: '아이디 또는 비밀번호가 일치하지 않습니다.',
				};
				return loginResult;
			}
			
			var passwordChangeDays = $ustra.app.prop().passwordChangeDays;
			var maximumLoginFailNumbers = $ustra.app.prop().maximumLoginFailNumbers;
			
			// 성공
			if (loginResult.body.resCd === '0000') {
			  
			  this.storeAuthentication(loginResult.body, addtionalInfoFn);
			  
			  
			  // 비밀번호 변경 케이스			  
			  if (passwordChangeDays && passwordChangeDays > 0 && passwordChangeDays < loginResult.body.pwdUnchangedDays) {
				loginResult.body.actionResponse = {
				  action: 'SUCCESS_RECOMMEND_CHANGE_PASSWORD',
				  message: '비밀번호 변경 후, ' + passwordChangeDays + '일이 경과하여, 비밀번호 변경이 필요합니다. 비밀번호를 변경하시겠습니까?'
				}
			  } else {
				loginResult.body.actionResponse.action = 'SUCCESS';
			  }
			  return loginResult
			}
			
			// 사용 불가 사용자
			if (loginResult.body.resCd === 'FS06') {
			  loginResult.body.actionResponse = {
				action: 'SHOW_DIALOG',
				message: '시스템을 사용할 수 없는 사용자입니다.'
			  }
			  return loginResult
			}
			
			// 접속 불가 지역
			if (loginResult.body.resCd === 'FS04') {
			  loginResult.body.actionResponse = {
				action: 'SHOW_DIALOG',
				message: '허용되지 않은 접속 지역입니다.'
			  }
			  return loginResult
			}
			
			// 휴면 또는 시스템 기간 연장
			if (loginResult.body.resCd === 'FS07') {
			  //if (!this.useAuthApproval) {
				loginResult.body.actionResponse = {
				  action: 'SHOW_DIALOG',
				  message: '시스템 사용 기간이 만료되었습니다. \n관리자에게 문의하시기 바랍니다.',
				}
// 			  } else {
// 				loginResult.body.actionResponse = {
// 				  action: 'FAIL_REQUIRE_APPROVAL',
// 				  message: '시스템 사용 기간이 만료되었습니다. \n관리자에게 시스템 연장 요청을 진행하시겠습니까?',
// 				  approvalType: '03',
// 				  approvalName: '휴면해제 승인 요청'
// 				}
// 			  }
			  return loginResult
			}

			// 비밀번호 만료
			if (loginResult.body.resCd === 'FS08') {
			  loginResult.body.actionResponse = {
				action: 'REQUIRE_CHANGE_PASSWORD',
				message: '비밀번호 변경 후, 이용 가능합니다.',
			  }
			  return loginResult
			}

			// 계정 잠김
			if (loginResult.body.resCd === 'FS09') {
			  // if (!this.useAuthApproval) {
				loginResult.body.actionResponse = {
				  action: 'SHOW_DIALOG',
				  message: '계정이 잠금 상태입니다. \n관리자에게 문의하시기 바랍니다.'
				}
// 			  } else {
// 				loginResult.body.actionResponse = {
// 				  action: LoginResponseAction.FAIL_REQUIRE_APPROVAL,
// 				  message: `계정이 잠금 상태입니다. \n관리자에게 계정 잠금 해제를 요청하시겠습니까?`,
// 				  approvalType: '01',
// 				  approvalName: '계정 잠김해제 승인 요청',
// 				}
// 			  }
			  return loginResult
			}

			if (loginResult.body.hasUser) {
			  if (loginResult.body.loginFailCnt >= maximumLoginFailNumbers) {
				// if (!this.useAuthApproval) {
				  loginResult.body.actionResponse = {
					action: 'SHOW_DIALOG',
					message: '최대 인증 시도를 초과하여 계정이 잠겼습니다. \n관리자에게 문의하시기 바랍니다.'
				  }
// 				} else {
// 				  loginResult.body.actionResponse = {
// 					action: LoginResponseAction.FAIL_REQUIRE_APPROVAL,
// 					message: `최대 인증 시도를 초과하여 계정이 잠겼습니다. \n관리자에게 비밀번호 초기화를 요청하시겠습니까?`,
// 					approvalType: '02',
// 					approvalName: '비밀번호 초기화 요청',
// 				  }
// 				}
				return loginResult
			  } else {
				loginResult.body.actionResponse = {
				  action: 'SHOW_DIALOG',
				  message: '인증이 실패되었습니다. \n최대 인증 시도 ' + maximumLoginFailNumbers + ' 건 중 ' + loginResult.body.loginFailCnt + ' 건을 시도하였습니다.'
				}
				return loginResult
			  }
			}

			loginResult.body.actionResponse = {
			  action: 'SHOW_DIALOG',
			  message: '아이디 또는 비밀번호가 일치하지 않습니다.'
			}

			return loginResult;
		}.bind(__self));		
	},
	
	/**
	/* 인증 해제 처리
	**/
	unAuthenticate: function() {
		var config = __self._config();
		$ustra.auth.clearAuthInfo();
		$ustra.bo.favorite.clearFavoriteInfo();
		return $ustra.axios.api(config.logoutApiUrl);
	},
	
	/**
	* 인증 정보 저장
	**/
	storeAuthentication: function(loginResult, addtionalInfoFn) {
		$ustra.bo.favorite.storeFavoriteInfo(loginResult.userMenus.map(function(m) { return m.mnuId; }));
		$ustra.auth.storeAuthInfo(loginResult.userKey, loginResult.userName, loginResult.sessionId, loginResult.authorities, addtionalInfoFn?addtionalInfoFn(loginResult) : undefined);
	},
	
	
	/**
	* 인증 정보 저장
	**/
	_addMenuAccessHistory: function(arg) {
		$ustra.axios.nexacroApi('/api/system/menu/access', {
			form: arg.form,
			parameter: {
				history: {
					mnuId: arg.menu.mnuId,
					mnuUrl: arg.menu.mnuUrl
				}
			}
		});
	},
	
	/**
	/* 메뉴 접근 여부 확인
	/* @parma id 메뉴 아이디 or 프로그램 아이디
	/* @return 접근 가능 여부 (boolean)
	**/
	canAccessMenu: function(id) {
		return $ustra.auth.hasRoles(id);
	},
	
	
	/**
	/* 메뉴 기능 접근 여부 확인
	/* @parma id 메뉴 아이디 or 프로그램 아이디
	/* @param funcId function 아이디
	/* @return 접근 가능 여부 (boolean)
	**/
	canAccessMenuFunction: function(id, funcId) {
		return $ustra.auth.hasRoles(id + ':' + funcId);
	},
	
	/**
	/* 메뉴 기능 접근 여부 확인
	/* @param form form 정보
	/* @param funcId function 아이디
	/* @return 접근 가능 여부 (boolean)
	**/
	canAccessFunction: function(form, funcId) {
		form = $ustra.auth._findMenuForm(form);
				
		if (!form) {
			return false;
		}
	
		return $ustra.bo.auth.canAccessMenuFunction(form.$ustraConfig.currentMenu.proIdVal || form.$ustraConfig.currentMenu.mnuId, funcId);
	},
	
	/**
	/* 메뉴 기능 접근 권한을 확인한다.
	/* @param form form 정보
	/* @param funcId function 아이디
	/* @return 접근 가능 여부 (boolean)
	**/
	checkAccessFunction: function(form, funcId) {
		
		return new Promise(function(resolve, reject){
			if (!$ustra.bo.auth.canAccessFunction(form, funcId)) {
				alert('해당 기능을 실행할 권한이 없습니다.', '권한 없음', 'auth', function() {
					reject();
				});
				return;
			}
			
			// 개인정보 접근 권한 확인
			var menuInfo = $ustra.auth._findMenuForm(form).$ustraConfig.currentMenu;
			var authInfo = $ustra.auth.getAuthInfo();
			var functionAuth = authInfo.roles.filter(function(auth) {
				return menuInfo.mnuId === auth.menuId && auth.functionId === funcId && auth.isPrivate;
			});
			
			if (functionAuth.length > 0) {
				$ustra.popup.open(form, 'ustra::forms/system/common/privateInfoConfirm.xfdl', '개인정보 접근 기능 실행',
				{
					height: 400,
					parameter: {
						mnuId: menuInfo.mnuId,
						fncId: funcId
					},
					closedCallback: function(result) {
						if (!result) {
							reject();
						} else {
							resolve();
						}
					}
				});
				return;
			}
			
			resolve();
		});
		
	},
	
	/**
	/* 권한 체킹 버튼을 등록한다.
	/* @param button 버튼
	**/
	_registerAuthButton: function(button) {
		if (button.authFunctionId) {
			button.___on_fire_onclick = button.on_fire_onclick;
			button.on_fire_onclick = function(btn, alt_key, ctrl_key, shift_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, meta_key) {
				
				var form = $ustra.component.getForm(this, true);
				$ustra.bo.auth.checkAccessFunction(form, this.authFunctionId)
					.then(function() {
						this.___on_fire_onclick(btn, alt_key, ctrl_key, shift_key, screenX, screenY, canvasX, canvasY, clientX, clientY, from_comp, from_refer_comp, meta_key);
					}.bind(this));			
				
 			}
		
		}
	}
	
};

$ustra.module('bo', {
	auth: auth
});

__self = $ustra.bo.auth;


if (!$ustra.bo.auth.__executed) {
	$ustra.bo.auth.__executed = true;
	$ustra.events.addEventHandler('accessed-menu-form', $ustra.bo.auth._addMenuAccessHistory);
	$ustra.events.addEventHandler($ustra.component.button.AUTH_BUTTON_INITIALIZED_EVENT_NAME, $ustra.bo.auth._registerAuthButton, null, false, -100);
}
]]></Script>
