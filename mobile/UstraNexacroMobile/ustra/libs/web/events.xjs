<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/core.xjs'
include 'ustra::libs/web/global.xjs'


$ustra.singleton('events', {

	// 어플리케이션 이벤트 명
	_applicationGlobalEventNames: [],
	
	/**
	/* application 주기 상 한번만 호출되는 이벤트 명 정의
	/* 등록 시에는 이벤트가 이미 발생된 경우, addEventHandler 시 자동으로 호출한다.
	/* @param name 등록 이벤트 명
	**/
	addApplicationGlobalEventName: function(name) {
		var index = this._applicationGlobalEventNames.findIndex(function(n) { return n.name === name });
	
		if (index > -1) {
			return
		}
		
		this._applicationGlobalEventNames.push({ name: name, called: false });
	},
	
	/**
	/* 글로벌 이벤트 호출 여부 조회
	/* @param name 이벤트 명
	/* 
	/* @return 호출여부 또는 호출 object (false | { arg: any })
	**/
	_isCalledGlobalEvent: function(name) {
		var index = this._applicationGlobalEventNames.findIndex(function(n) { return n.name === name });
		
		if (index < 0) {
			return false;
		}
		
		if (!this._applicationGlobalEventNames[index].called) {
			return false;
		}
		
		return { arg: this._applicationGlobalEventNames[index].arg };
	},
	
	/**
	/* 글로벌 이벤트 호출 처리
	/* @param name 이벤트 명
	/* @param arg 호출 argument
	**/
	_setCallGlobalEvent: function(name, arg) {
		var index = this._applicationGlobalEventNames.findIndex(function(n) { return n.name === name });
		
		if (index < 0) {
			return false;
		}
		
		this._applicationGlobalEventNames[index].called = true;
		this._applicationGlobalEventNames[index].arg = arg;
	},
	
	/**
	/* 글로벌 이벤트에 저장할 이벤트 명 조회
	/* @param name 이벤트 명
	/* 
	/* @return 글로벌 이벤트 명 (string)
	**/
	_getGlobalEventName: function(name) {
		return 'event-handler-' + name;
	},
	
	/**
	/* 이벤트 핸들러 목록 조회
	/* @param name 이벤트 명
	/* 
	/* @return 핸들러 목록 (array)
	**/
	_getEventHandlers: function(name) {
		return $ustra.global.getItem(this._getGlobalEventName(name)) || [];
	},
	
	/**
	/* 이벤트 핸들러 추가
	/* @param name 이벤트 명
	/* @param handler 핸들러 (function)
	/* @scope 호출 scope (optional)
	/* @once 한번만 호출 여부 (optional, default: false)
	/* 
	/* @return 핸들러 키 (string)
	**/
	addEventHandler: function (name, handler, scope, once) {
		var calledArg = this._isCalledGlobalEvent(name);
		if (calledArg) {
			if (scope) {
				handler.call(scope, calledArg.arg);
			} else {
				handler(calledArg.arg);
			}
			return;
		}

		var key = this._getGlobalEventName(name);
		var handlers = this._getEventHandlers(name);
		var handlerKey = $ustra.global.uniqueKey(13);
		
		handlers.push({ handler: handler, scope: scope, key: handlerKey, once: once });
		$ustra.global.setItem(key, handlers);
		
		return handlerKey;
	},
	
	/**
	/* 이벤트 핸들러 제거
	/* @param name 이벤트 명
	/* @param handlerKey 핸들러 키 (addEventHandler 호출 값)
	/* 
	/* @return 핸들러 키 (string)
	**/
	removeEventHandler: function (name, handlerKey) {
		var key = this._getGlobalEventName(name);
		var handlers = this._getEventHandlers(name);
		
		if (!handlerKey) {
			handlers.splice(index, handlers.length);
			return;
		} 
		var index = handlers.findIndex(function(handler) { return handler.key === handlerKey} );
		if (index >= 0) {
			handlers.splice(index, 1);
		}
	},
	
	/**
	/* 이벤트 발생
	/* @param name 이벤트 명
	/* @param arg argument 객체
	/* @return 핸들러 리턴 결과
	**/
	fireEvent: function (name, arg) {
		
		this._setCallGlobalEvent(name, arg);
		
		var key = this._getGlobalEventName(name);
		var handlers = this._getEventHandlers(name);
		var eventResult = undefined;
		
		handlers.forEach(function(handler) {
			var result;
			if (handler.scope) {
				result = handler.handler.call(handler.scope, arg);
			} else {
				result = handler.handler(arg);
			}
			handler.executed = true;
			
			if (typeof result !== 'undefined') {
				eventResult = result;
			}
			
			if (result === false) {
				return;
			}
		});
		
		handlers = handlers.filter(function(handler) { return !(handler.once && handler.executed) });
		$ustra.global.setItem(key, handlers);
		
		return eventResult;
	},
	
	/**
	/* 전역 에러 이벤트 발생
	/* @param source 발생 소스 (nexacro.Component)
	/* @param requestUrl 요청 URL (string)
	/* @param statusCode 상태 코드 (number)
	/* @param code 에러 코드 (number)
	/* @param message 에러 메시지 (string)
	/* @param err 에러 객체 (Error)
	**/
	fireGlobalErrorEvent: function(source, requestUrl, statusCode, code, message, err) {
		nexacro.getEnvironment().onerror.fireEvent(
					nexacro.getEnvironment(),
					new nexacro.ErrorEventInfo(
						source, 
						'', 
						'CommunicationError', 
						message, 
						err, 
						statusCode, 
						requestUrl, 
						window.location.href, 
						''),
					false);
	}
	
});


]]></Script>
