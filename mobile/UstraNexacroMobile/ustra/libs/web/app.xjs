<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/modules/axios-0.21.1.xjs';
include 'ustra::libs/web/dom.xjs';
include 'ustra::libs/web/form.xjs';
include 'ustra::libs/web/events.xjs';
include 'ustra::libs/web/axios.xjs';
include 'ustra::libs/web/auth.xjs';
include 'ustra::libs/web/ui.xjs';


// API URL 변수 명
var API_URL_VARIABLE_NAME = 'apiUrl';

// Config script 경로
var CONFIG_FILE_PATH = '/ustraConfig/config.json';

// Config 초기화 이벤트 명 
var CONFIG_INITIALIZED_EVENT_NAME = 'app-config-loaded';

// 초기 데이터 로드 이벤트 명
var INITIALIZED_DATA_EVENT_NAME = 'initial-data-loaded';

// 초기 데이터 저장 아이템 키 값
var INITIAL_DATA_ITEM_NAME = '__ustra-initial-data__';

// 초기 데이터 조회 API URL
var INITIAL_DATA_API_URL = '/api/system/initializing-data';

// 외부 라이브러리
var EXTERNAL_LIB_PATHS = [
	'/ustra/libs/modules/lodash-4.17.21.min.js',
	'/ustra/libs/modules/crypto-4.0.0.min.js',
	'/ustra/libs/modules/moment.min.js'
]

$ustra.module('app', {

	_config: {
		// 초기 데이터 로드 사용여부
		loadInitialData: true,
		
		// jQuery 사용 여부
		useJQuery: true,
		
		// error 페이지 주소
		errorPageUrl: 'ustra::forms/page/error/index.xfdl',
		
		// 로그인 페이지 주소
		loginPageUrl: 'ustra::forms/page/login.xfdl',
		
		// 메인 페이지 주소
		mainPageUrl: 'ustra::forms/page/main/index.xfdl',
		
		// 기본 탭 주소
		defaultTabPageUrl: null,
		
		// 시스템 코드
		systemCode: 'BO',
		
		// 클라이언트 암호화 키
		clientCryptoKey: 'N3k5NjN6bzk5OGtzcTI5MA=='
	},
	
	/**
	/* Configuration 정보 조회
	/* configuration 정보를 비동기로 조회 되므로 callback으로 수신하여 처리
	/* @param callback callback function
	**/
	getConfig: function(callback) {
		$ustra.events.addEventHandler(CONFIG_INITIALIZED_EVENT_NAME, callback);
	},
	
	/**
	/* 초기화 완료 여부
	*/
	_initialized: false,
	
	
	_externalLibPaths: [
	],
	
	/**
	/* 어플리케이션 초기화
	**/
	_initialize: function() {
		if ($ustra.app._initialized) {
			return;
		}
		$ustra.app._initialized = true;
		
		// load configuration
		$ustra.app._loadConfiguration(function(config) {
			
			$ustra.app._config = config;
			console.log('load $ustra configuration', $ustra.app._config);
			
			nexacro.setHTTPHeaderVariable("X-Nexacro-Request", "Nexacro17.1");
			if (axios) {
				// axios base url 처리
				axios.defaults.baseURL = nexacro._getService(API_URL_VARIABLE_NAME).url || null;
				axios.defaults.responseType = 'json';
				axios.defaults.headers.common['Accept'] = 'application/json';
				axios.defaults.headers.common['X-Nexacro-Request'] = 'Nexacro17.1';
			}
			
			if (config.loadInitialData) {
				$ustra.app._initializeData.call(nexacro.getApplication(), config);
			}
			
			$ustra.events.fireEvent(CONFIG_INITIALIZED_EVENT_NAME, config);
		});
		
		
	},
	
	/**
	/* 어플리케이션 설정 로드
	**/
	_loadConfiguration: function(callback) {
		var config = $ustra.app._config;
		
		$ustra.axios.loadScript(EXTERNAL_LIB_PATHS, function() {
			axios.request({
				url: CONFIG_FILE_PATH,
				responseType: 'json'
			})
				.then(function(res) {
					var finalConfig = config;
					if (res.data) {
						finalConfig = $ustra.core.merge({}, config, res.data);
					} else {
						finalConfig = config;
					}
					
					// add library
					var libs = [];
					if (config.useJQuery) {
						// load jquery library
						libs.push('/ustra/libs/modules/jquery-3.6.0.min.js');
					}
					
					$ustra.axios.loadScript(libs, function() {
						if (callback) {
							callback(finalConfig);
						}
					});
					
				})
				.catch(function(err) {
					console.error(err);
					callback(config);
				});
		});
		
		
	},
	
	/**
	/* 초기 데이터 로드
	**/
	_initializeData: function(config) {
		
		$ustra.axios.defaults.api.headers['X-Sys-Cd'] = config.systemCode;
		
		// 초기 데이터 로드 비사용 시에는 완료 처리
		if (!config.loadInitialData) {
			$ustra.events.fireEvent(INITIALIZED_DATA_EVENT_NAME);
			return;
		}
	
		var storageInitialData = window.sessionStorage.getItem(INITIAL_DATA_ITEM_NAME);
		
		if (storageInitialData) {
			$ustra.global.setItem(INITIAL_DATA_ITEM_NAME, JSON.parse(storageInitialData));
			$ustra.events.fireEvent(INITIALIZED_DATA_EVENT_NAME);
			return;
		}
		
		$ustra.axios.api(INITIAL_DATA_API_URL, {
			method:'post'
			})
			.then(function(res) {
				if (res.data) {
					window.sessionStorage.setItem(INITIAL_DATA_ITEM_NAME, JSON.stringify(res.data.body));
					$ustra.global.setItem(INITIAL_DATA_ITEM_NAME, res.data.body);
					$ustra.events.fireEvent(INITIALIZED_DATA_EVENT_NAME);
				}
			})
			.catch(function(err) {
				console.error('초기 데이터 조회 중 오류가 발생하였습니다. 관리자에게 문의하시기 바랍니다.', err)
				err.moveToErrorPage = true; // 에러 화면 이동 여부 설정
				
				$ustra.events.fireGlobalErrorEvent(
					nexacro.getApplication(),
					INITIAL_DATA_API_URL,
					$ustra.axios.getStatusCode(err),
					-1,
					'초기 데이터 조회 중 오류가 발생하였습니다. 관리자에게 문의하시기 바랍니다.',
					err
				);
				
				$ustra.events.fireEvent(INITIALIZED_DATA_EVENT_NAME);
				
			});
	},
	
	/**
	/* 초기 데이터를 조회한다.
	**/
	getInitialData: function() {
		return $ustra.global.getItem(INITIAL_DATA_ITEM_NAME);
	},
	
	/**
	/* 초기 데이터 로드 후, 처리할 action 등록
	/* @param action 로드 후 실행할 function (function)
	**/
	afterInitialized : function(action) {
		$ustra.events.addEventHandler(INITIALIZED_DATA_EVENT_NAME, action, nexacro.getApplication());
	},
	
	/**
	/* 어플리케이션의 메인 프레임 정보를 조회한다.
	**/
	getMainFrame: function() {
		return nexacro.getApplication().mainframe.QuickViewFrame ? nexacro.getApplication().mainframe.QuickViewFrame :
				nexacro.getApplication().mainframe.WorkFrame;
	},
	
	/**
	/* 어플리케이션 설정 정보 조회
	**/
	prop: function() {
		return $ustra.app.getInitialData().appProp;
	},
	
	/**
	/* 프로젝트 설정 정보 조회
	**/
	projectProp: function() {
		return $ustra.app.getInitialData().projectProp;
	},
	
	/**
	/* 파일 그룹 정보 조회
	/* @param id 파일 그룹 아이디
	**/
	fileGroup: function(id) {
		var fileGroupData = $ustra.app.getInitialData().fileGroups;
		
		if (!fileGroupData) {
			return;
		}
		
		return fileGroupData.find(function(group) { return group.fileGrpId === id; });
	},
	
	/**
	/* 메뉴 목록 조회
	/* @param systemCode 시스템 코드
	**/
	menus: function(systemCode) {
		return $ustra.core.merge([], $ustra.app.getInitialData().menus)
				.filter(function(menu) {
					return !systemCode || menu.sysCd === systemCode;
				});
	},
	
	/**
	/* 공통 코드 관련 기능
	**/
	commonCode: {
		_columns: [
			['grpCd', 'string'],
			['dtlCd', 'string'],
			['cdNm', 'string'],
			['useYn', 'string'],
			['srtNo', 'int'],
		],
		
		// 매핑 그룹 코드 조회
		_getMappingGroupCode: function(grpCd) {
			grpCd = _.toUpper(grpCd);
			var mappingRules = $ustra.app.getInitialData().codeMappingRules;
			
			if (mappingRules[grpCd]) {
				return mappingRules[grpCd];
			}
			
			return grpCd;
		},
		
		/**
		/* 공통 코드용 데이터 셋을 생성한다.
		/* @param groupCode 그룹 코드 (optional) 
		/* @param excludeGroupInfo 그룹 정보 제외 여부 (boolean, default:true)
		/*
		/* @return 데이터 셋 (nexacro.DataSet)
		**/
		createDataSet: function(groupCode, excludeGroupInfo) {
		
			excludeGroupInfo = $ustra.defaults(excludeGroupInfo, true);
		
			var dataset = new nexacro.Dataset;
			$ustra.app.commonCode._columns.forEach(function(column) {
				dataset.addColumn(column[0], column[1]);
			});
			
			if (groupCode) {
				var codes = $ustra.app.getInitialData().commonCodes;
				groupCode = $ustra.app.commonCode._getMappingGroupCode(groupCode);
				
				$ustra.app.commonCode.getCommonCodes(groupCode, excludeGroupInfo)
					.forEach(function(code) {
						dataset.addRow();
						$ustra.app.commonCode._columns.forEach(function(column) {
							dataset.setColumn(dataset.rowposition, column[0], code[column[0]]);
						});
					});
			}
			
			return dataset;
		},
		
		/**
		/* 공통 코드의 코드 명을 매핑한다.
		/* @param grpCd 그룹 코드 (string) 
		/* @param dtlCd 상세 코드 (string)
		/*
		/* @return 코드 명 (string)
		**/
		bindCodeName: function(grpCd, dtlCd) {
			
			if (!grpCd || !dtlCd) {
				return null;
			}
		
			var codes = $ustra.app.commonCode.getCommonCodes(grpCd, false)
							.filter(function(code) {
								return code.grpCd === grpCd && code.dtlCd === dtlCd;
							});
			
			if (codes.length > 0) {
				return codes[0].cdNm;
			}
			
			return null;			
		},
		
		/**
		/* 그룹 코드의 공통 코드 목록을 조회한다.
		/* @param grpCd 그룹 코드
		/* @param excludeGroupInfo 그룹 정보 제외 여부 (boolean, default:true)
		/*
		/* @return 코드 목록 (object[])
		**/
		getCommonCodes: function(grpCd, excludeGroupInfo) {
			grpCd = $ustra.app.commonCode._getMappingGroupCode(grpCd);
			
			var codes = $ustra.app.getInitialData().commonCodes;
			var grpCodes = []
			codes.forEach(function(code) {
					
					if (grpCd !== code.grpCd) {
						return;
					}
					
					if (excludeGroupInfo && code.dtlCd === '*') {
						return;
					}
					grpCodes.push(code);
				});
				
			return grpCodes;
		}
		
	}
	
});

// load css
$ustra.dom.loadCss('ustra', '/ustra/styles/ustra.css');

// load ui module init
$ustra.ui._init();


// patch date function
Date.prototype.toISOString = function() {
	var date = this;
	var pad = function(num) {
		const norm = Math.floor(Math.abs(num))
		return (norm < 10 ? '0' : '') + norm
	};

	return (
		date.getFullYear() +
		'-' +
		pad(date.getMonth() + 1) +
		'-' +
		pad(date.getDate()) +
		'T' +
		pad(date.getHours()) +
		':' +
		pad(date.getMinutes()) +
		':' +
		pad(date.getSeconds()) +
		'.' +
		_.padStart(date.getMilliseconds().toString(), 3, '0') +
		'Z'
	);
};


$ustra.events.addApplicationGlobalEventName(CONFIG_INITIALIZED_EVENT_NAME);
$ustra.events.addApplicationGlobalEventName(INITIALIZED_DATA_EVENT_NAME);

if (!$ustra.app._initialized) {
	if (!nexacro.getApplication()._isLoaded() && !$ustra.core.isQuickViewUrl()) {
		nexacro.getApplication().addEventHandler('onload', function(obj) {
			$ustra.app._initialize.call(obj);
		}, this);
	} else {
		$ustra.app._initialize.call(nexacro.getApplication());
		$ustra.app.afterInitialized(function() {
			if (nexacro.getApplication().Application_onload) {
				nexacro.getApplication().Application_onload(nexacro.getApplication(), null);
			}
		});		
	}
}






]]></Script>
