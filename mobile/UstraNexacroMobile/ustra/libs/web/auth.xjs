<?xml version="1.0" encoding="utf-8"?>
<Script version="1.0" type="xscript5.1"><![CDATA[include 'ustra::libs/web/core.xjs';
include 'ustra::libs/web/utils/crypto.xjs';
include 'ustra::libs/web/events.xjs';
include 'ustra::libs/web/form.xjs';
include 'ustra::libs/web/component.xjs';
include 'ustra::libs/web/component/button.xjs';
include 'ustra::libs/web/axios.xjs';

var AUTH_INFO_ITEM_NAME = '__ustra-auth__';


$ustra.module('auth', {
	
	defaults: {
		// 로그인 API URL
		loginApiUrl: '/api/authentication/login',
		
		// 폴링 설정
		polling: {
			enabled: true,
			apiUrl: '/api/auth-ws',
			duration: 10000
		},
		
		// 검증 설정
		validation: {
			enabled: false,
			headerName: 'x-sec-valid-key',
			secretKey: null
		}
	},
	
	// merge된 option 조회
	_config: function() {
// 		if ($ustra.auth._cachedConfig) {
// 			return $ustra.auth._cachedConfig;
// 		}

		$ustra.auth._cachedConfig = $ustra.core.merge({}, $ustra.auth.defaults, $ustra.app._config.auth || {})
		return $ustra.auth._cachedConfig;
	},
	
	/**
	* 인증 정보를 저장한다.
	* @param sub 인증 키
	* @param name 디스플레이 명
	* @param sessionId 세션아이디
	* @param roles 역할
	* @param additionalInfo 부가 정보
	**/
	storeAuthInfo: function(sub, name, sessionId, roles, additionalInfo) {
		var authInfo = {
			sub: sub,
			name: name,
			sessionId: sessionId,
			additionalInfo: additionalInfo || {},
			roles: roles || []
		};
		authInfo = $ustra.utils.crypto.encryptAes256(JSON.stringify(authInfo));
		window.sessionStorage.setItem(AUTH_INFO_ITEM_NAME, authInfo);
	},
	
	/**
	* 인증 정보를 초기화 한다.
	**/
	clearAuthInfo: function() {
		window.sessionStorage.removeItem(AUTH_INFO_ITEM_NAME);
	},
	
	/**
	* 인증 정보를 조회한다.
	**/
	getAuthInfo: function() {
		var storedAuthString = window.sessionStorage.getItem(AUTH_INFO_ITEM_NAME);
		
		if (!storedAuthString) {
			return null;
		}
		
		var authInfo = JSON.parse($ustra.utils.crypto.decryptAes256(storedAuthString));
		return Object.freeze(authInfo);
	},
	
	/**
	* 인증 여부를 조회
	/* @return 인증 완료 여부 (boolean)
	**/
	authenticated: function() {
		var authInfo = $ustra.auth.getAuthInfo();
		return !!authInfo && !!authInfo.additionalInfo && !!authInfo.additionalInfo.completed;
	},
	
	/**
	* 인증 완료 처리
	**/
	completeAuthenticated: function(roles) {
		var authInfo = $ustra.auth.getAuthInfo();
		authInfo.additionalInfo.completed = true;
		$ustra.auth.storeAuthInfo(authInfo.sub, authInfo.name, authInfo.sessionId, roles, authInfo.additionalInfo);
	},
	
	/**
	/* ROLE 권한 존재 여부 확인
	/* @param roles 권한 목록 (string | array)
	/* @return 
	**/
	hasRoles: function(roles) {
		roles = Array.isArray(roles) ? roles : [roles];
		var authInfo = $ustra.auth.getAuthInfo();
		
		if (!authInfo || !authInfo.roles) {
			return false;
		}
		
		return authInfo.roles.findIndex(function(role) {
			var roleAuth = role.authority;
			return roles.some(function(r) {
				return 'ROLE_' + r === roleAuth;
			});
		}) > -1;
	},
	
	/**
	* 인터셉터 등록
	**/
	_addInterceptor: function() {
		$ustra.axios.getInstance().interceptors.request.use(function (config) {			
			if (config.form) {
				var form = $ustra.auth._findMenuForm(config.form);
				
				if (form) {
					var currentProgramMenu = form.$ustraConfig.currentMenu;
					// 헤더 정보 추가
					if (currentProgramMenu.mnuId) {
						config.headers['Menu-Id'] = currentProgramMenu.mnuId // 메뉴 아이디
					}

					if (currentProgramMenu.proIdVal) {
						config.headers['Program-Id'] = currentProgramMenu.proIdVal // 프로그램 아이디
					}
				}
			}
			
			try {
				var _config = $ustra.auth._config();
				var _authInfo = $ustra.auth.getAuthInfo();
				if (_config.validation.enabled && _authInfo) {
					config.headers[_config.validation.headerName] = $ustra.utils.crypto.encryptAes256ForServer(_authInfo.sub, _config.validation.secretKey);
				}
			} catch(e) {
				// console.error(e);
			}
			
			return config;
		});
		
// 		$ustra.axios.getInstance().interceptors.response.use(function(res) {
// 			return res;
// 		}, 
// 		function(err) {
// 			console.log({err});
// 			return Promise.reject(err);
// 		});
	},
	
	_findMenuForm: function(form) {
		var currentForm = form;
		while(currentForm) {
			if (currentForm) {
				if (currentForm.$ustraConfig && currentForm.$ustraConfig.currentMenu) {
					return currentForm;
				}
			}
			currentForm = currentForm.parent;
		}
	},
		
	/**
	* 폼 로드 전 인증 정보 검증 수행
	**/
	_checkAuthBeforeFormLoaded: function(form) {
		
		var currentMenu = $ustra.form.getMenu(form);
		var authInfo = $ustra.auth.getAuthInfo();
				
		if (form.requiredAuth === 'true' && !authInfo) {
			$ustra.auth._throwMenuAuthorizationError(form, currentMenu, '로그인이 필요합니다.');
			return false;
		}
		
		if (authInfo && (currentMenu || form === $ustra.app.getMainFrame().form)) {
			setTimeout(function() { $ustra.auth.startCheckAuth(); }, 3000);
		}	
		
		if (currentMenu) {
			
			form.$ustraConfig = form.$ustraConfig || {};
			form.$ustraConfig.currentMenu = currentMenu;
						
			// 권한 사용하지 않음.
			if (currentMenu.mnuTyCd === '03') {
				return;
			}
			
			if (!authInfo || !authInfo.roles) {
				$ustra.auth._throwMenuAuthorizationError(form, currentMenu, '로그인이 필요합니다.');
				return false;
			}
			
			var index = authInfo.roles.findIndex(function(role) {
				return role.menuId === currentMenu.mnuId;
			});
			
			if (index < 0) {
				$ustra.auth._throwMenuAuthorizationError(form, currentMenu);
				return false;
			}
			$ustra.events.fireEvent('accessed-menu-form', { menu: currentMenu, form:form });
			
		}
	},
	
	/**
	* 인증 유효성을 체크한다.
	*/
	startCheckAuth: function() {
		$ustra.auth._startPolling();
	},
	
	/**
	* 폴링 체크 수행
	*/
	_startPolling: function() {
		var config = $ustra.auth._config();
		
		
		if (!config.polling.enabled) {
			return;
		}
		
		if ($ustra.auth._startedPolling) {
			return;
		}
		$ustra.auth._startedPolling = true;
		
		var _doPolling = function() {
		
			if (!config.polling.enabled) {
				return;
			}
		
			if (!$ustra.auth.authenticated()) {
				if ($ustra.auth._pollingTimer) {
					clearTimeout($ustra.auth._pollingTimer);
					$ustra.auth._pollingTimer = null;
				}
				$ustra.auth._startedPolling = false;
				return;
			}
			
			var authInfo = $ustra.auth.getAuthInfo();
			var parameter = JSON.stringify({
				UserKey: authInfo.sub,
				ProcId: authInfo.sessionId
			});
			parameter = encodeURIComponent($ustra.utils.crypto.encryptAes256ForServer(parameter, $ustra.app._config.clientCryptoKey));
			var url = config.polling.apiUrl + '?k=' + parameter;
			
			$ustra.axios.api(url, {
				method: 'GET',
				showLoading: false,
				autoHandlerError: false
			}).then(function(res) {
				
				$ustra.auth._pollingFailNumber = 0;
				
				if (res && res.data) {
					
					if (res.data.resultCode === 'FS01') {
						$ustra.auth._startedPolling = false;
						if ($ustra.auth._pollingTimer) {
							clearTimeout($ustra.auth._pollingTimer);
						}
						$ustra.auth._throwMenuAuthorizationError($ustra.app.getMainFrame().form, null, '동일한 계정으로 중복 인증되었습니다.');
						return;
					}
					
					if (res.data.resultCode === 'FS10') {
						$ustra.auth._startedPolling = false;
						if ($ustra.auth._pollingTimer) {
							clearTimeout($ustra.auth._pollingTimer);
						}
						$ustra.auth._throwMenuAuthorizationError($ustra.app.getMainFrame().form, null, '인증이 만료되었습니다. 다시 로그인하시기 바랍니다.');
						return;
					}
				}
				
				$ustra.auth._pollingTimer = setTimeout(_doPolling, config.polling.duration);
				
			}).catch(function() {
				$ustra.auth._pollingFailNumber++;
				
				if ($ustra.auth._pollingFailNumber > 10) {
					$ustra.auth._startedPolling = false;
					
					if ($ustra.auth._pollingTimer) {
						clearTimeout($ustra.auth._pollingTimer);
					}
					$ustra.auth._throwMenuAuthorizationError($ustra.app.getMainFrame().form, null, '인증이 만료되었습니다. 다시 로그인하시기 바랍니다.');
					return;
				}
				
				$ustra.auth._pollingTimer = setTimeout(_doPolling, config.polling.duration);
				
			});
			
		};
		
		$ustra.auth._pollingFailNumber = 0;
		_doPolling();
	},
	
	_throwMenuAuthorizationError: function(form, currentMenu, message) {
		$ustra.auth.clearAuthInfo();
		$ustra.events.fireGlobalErrorEvent(
					form,
					currentMenu ? currentMenu.mnuUrl : null,
					401,
					-1,
					message || '선택한 기능을 사용할 수 있는 권한이 없습니다.',
					new Error('선택한 기능을 사용할 수 있는 권한이 없습니다.')
				);
	},
	
	
	_registerAuthButton: function(button) {
	}
	
});

if (!$ustra.auth.__executed) {
	$ustra.auth.__executed = true;
	$ustra.auth._addInterceptor();
	$ustra.events.addEventHandler('before-form-loaded', $ustra.auth._checkAuthBeforeFormLoaded, null, false);
}

]]></Script>
